#define(Column pk)
#define(String pknController,String instanceName,String pknEntity,String className,String pknService,String requestMapping,String functionName)
package ${pknController};

import java.util.ArrayList;
import java.util.List;
import java.util.Map;

import org.apache.commons.lang3.StringUtils;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.ModelMap;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

import com.ampthon.frame.base.controller.BaseController;
import com.ampthon.frame.dwz.AjaxDone;
import com.ampthon.frame.dwz.DwzPageVO;
import com.ampthon.frame.log.Log;
import com.ampthon.frame.log.LogMessageObject;
import com.ampthon.frame.log.impl.LogUitls;
import com.ampthon.frame.util.BeanUtils;
import com.github.pagehelper.PageHelper;
import com.github.pagehelper.PageInfo;
import ${pknEntity}.${className};
import ${pknService}.${className}Service;

@Controller
@RequestMapping("/${requestMapping}")
public class ${className}Controller extends BaseController{

	@Autowired
	private ${className}Service ${instanceName}Service;
	private static final Logger logger = LoggerFactory.getLogger(${className}Controller.class);
	
	private static final String CREATE = "/${requestMapping}/create";
	private static final String UPDATE = "/${requestMapping}/update";
	private static final String LIST = "/${requestMapping}/${instanceName}list";
	private static final String VIEW = "/${requestMapping}/view";
	
	@RequestMapping("/list")
	public String list(DwzPageVO vo, ModelMap map, ${className} query) {
		PageHelper.startPage(vo.getPageNum(), vo.getNumPerPage());

		Map<Object, Object> seMap = BeanUtils.getValueMap(query);

		seMap.put("orderSql", BeanUtils.getOrderSql(vo));
		List<${className}> logList = ${instanceName}Service.selectByMap(seMap);

		PageInfo<${className}> pageInfo = new PageInfo<${className}>(logList);
		logger.debug(" getPageSize : {} ", pageInfo.getPageSize());

		pageInfo.setOrderField(vo.getOrderField());
		pageInfo.setOrderDirection(vo.getOrderDirection());
		map.put("pageInfo", pageInfo);
		map.put("query", query);
		return LIST;
	}
	
	@Log(message="删除${functionName}[id={0}]")
	@RequestMapping(value = "/delete")
	@ResponseBody
	public AjaxDone delete(@RequestParam("id") ${pk.javaType} id) {
		${instanceName}Service.deleteByPrimaryKey(id);
		LogUitls.putArgs(LogMessageObject.newWrite().setObjects(new Object[]{id}));
		return AjaxDone.newOk("信息${functionName}删除成功", "");
	}
	
	@Log(message="批量删除${functionName}[id={0}]")
	@RequestMapping(value = "/deleteBatch")
	@ResponseBody
	public AjaxDone deleteBatch(@RequestParam("ids") String ids) {
		logger.debug("ids {}", ids);
		LogUitls.putArgs(LogMessageObject.newWrite().setObjects(new Object[]{ids}));
		if (StringUtils.isBlank(ids)) {
			return AjaxDone.newError("请选择要删除的信息");
		} else {
			List<${pk.javaType}> idList = new ArrayList<${pk.javaType}>();
			String[] idsArr = ids.split(",");
			for (String id : idsArr) {
				if (StringUtils.isBlank(id)) {
					continue;
				}
				#if("String" == pk.javaType)
				idList.add(id);
				#elseif("Long" == pk.javaType || "Double" == pk.javaType)
				idList.add(${pk.javaType}.parse${pk.javaType}(id));
				#else
				idList.add((${pk.javaType})id);
				#end
			}
			${instanceName}Service.deleteBatchByPrimaryKey(idList);
		}
		return AjaxDone.newOk("信息${functionName}删除成功", "");
	}
	
}
